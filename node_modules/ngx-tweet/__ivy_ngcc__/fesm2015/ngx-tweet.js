import { DOCUMENT, CommonModule } from '@angular/common';
import { Inject, Injectable, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, ViewEncapsulation, NgModule } from '@angular/core';
import { Observable } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NgxTweetComponent_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "isTwitterScriptLoading"]);
} }
const _c0 = ["*"];
class NgxTweetService {
    /**
     * @param {?} _document
     */
    constructor(_document) {
        this._document = _document;
        this.TWITTER_OBJECT = 'twttr';
        this.TWITTER_SCRIPT_ID = 'twitter-wjs';
        this.TWITTER_WIDGET_URL = 'https://platform.twitter.com/widgets.js';
    }
    /**
     * @return {?}
     */
    loadScript() {
        return Observable.create((observer) => {
            this._startScriptLoad();
            this._document.defaultView[this.TWITTER_OBJECT].ready(this._onTwitterScriptLoadedFactory(observer));
        });
    }
    /**
     * @return {?}
     */
    _startScriptLoad() {
        const /** @type {?} */ twitterData = this._document.defaultView[this.TWITTER_OBJECT] || {};
        if (this._twitterScriptAlreadyExists()) {
            this._document.defaultView[this.TWITTER_OBJECT] = twitterData;
            return;
        }
        this._appendTwitterScriptToDOM();
        twitterData._e = [];
        twitterData.ready = (callback) => {
            twitterData._e.push(callback);
        };
        this._document.defaultView[this.TWITTER_OBJECT] = twitterData;
    }
    /**
     * @return {?}
     */
    _twitterScriptAlreadyExists() {
        const /** @type {?} */ twitterScript = this._document.getElementById(this.TWITTER_SCRIPT_ID);
        return (twitterScript !== null || typeof twitterScript !== 'object');
    }
    /**
     * @return {?}
     */
    _appendTwitterScriptToDOM() {
        const /** @type {?} */ firstJSScript = this._document.getElementsByTagName('script')[0];
        const /** @type {?} */ js = this._document.createElement('script');
        js.id = this.TWITTER_SCRIPT_ID;
        js.src = this.TWITTER_WIDGET_URL;
        firstJSScript.parentNode.insertBefore(js, firstJSScript);
    }
    /**
     * @param {?} observer
     * @return {?}
     */
    _onTwitterScriptLoadedFactory(observer) {
        return (twitterData) => {
            observer.next(twitterData);
            observer.complete();
        };
    }
}
NgxTweetService.ɵfac = function NgxTweetService_Factory(t) { return new (t || NgxTweetService)(ɵngcc0.ɵɵinject(DOCUMENT)); };
NgxTweetService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxTweetService, factory: NgxTweetService.ɵfac });
/** @nocollapse */
NgxTweetService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxTweetService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxTweetComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _ngxTweetService
     * @param {?} _changeDetectorRef
     */
    constructor(_elementRef, _ngxTweetService, _changeDetectorRef) {
        this._elementRef = _elementRef;
        this._ngxTweetService = _ngxTweetService;
        this._changeDetectorRef = _changeDetectorRef;
        this.isTwitterScriptLoading = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._loadTwitterScript();
    }
    /**
     * @return {?}
     */
    _loadTwitterScript() {
        this._ngxTweetService
            .loadScript()
            .subscribe((twitterData) => {
            this._updateTwitterScriptLoadingState();
            twitterData.widgets.createTweet(this.tweetId, this._elementRef.nativeElement, {});
        });
    }
    /**
     * @return {?}
     */
    _updateTwitterScriptLoadingState() {
        this.isTwitterScriptLoading = false;
        this._changeDetectorRef.detectChanges();
    }
}
NgxTweetComponent.ɵfac = function NgxTweetComponent_Factory(t) { return new (t || NgxTweetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NgxTweetService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NgxTweetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxTweetComponent, selectors: [["ngx-tweet"]], inputs: { tweetId: "tweetId" }, ngContentSelectors: _c0, decls: 1, vars: 1, consts: [[4, "ngIf"]], template: function NgxTweetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, NgxTweetComponent_0_Template, 1, 0, undefined, 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isTwitterScriptLoading);
    } }, directives: [ɵngcc1.NgIf], styles: [".twitter-tweet { transform: none !important; }"], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
NgxTweetComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgxTweetService, },
    { type: ChangeDetectorRef, },
];
NgxTweetComponent.propDecorators = {
    "tweetId": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxTweetComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-tweet',
                template: '<ng-content *ngIf="isTwitterScriptLoading"></ng-content>',
                styles: ['.twitter-tweet { transform: none !important; }'],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: NgxTweetService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { tweetId: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxTweetModule {
}
NgxTweetModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxTweetModule });
NgxTweetModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxTweetModule_Factory(t) { return new (t || NgxTweetModule)(); }, providers: [NgxTweetService], imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxTweetModule, { declarations: function () { return [NgxTweetComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxTweetComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxTweetModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NgxTweetComponent
                ],
                imports: [CommonModule],
                exports: [NgxTweetComponent],
                providers: [NgxTweetService]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxTweetModule, NgxTweetComponent as ɵa, NgxTweetService as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9pbGxkYXZlL0RvY3VtZW50cy9Qcm9mZXNzaW9uYWwvTWFyc2hhbGwgQXJ0IFN0dWRpby9NQVMgUHJvamVjdHMvMjAyMCBXZWJzaXRlIFVwZ3JhZGVzL0lua3kgU3RvcmllcyAzLjAvQW5ndWxhciBBcHAvaW5reS1zdG9yaWVzLWFwcC9ub2RlX21vZHVsZXMvbmd4LXR3ZWV0L2Zlc20yMDE1L25neC10d2VldC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E4REMsNEdBR0M7Ozs7Ozs7Ozs7a0NBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0EwQ0QsdUlBU0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFTQTs7Ozs7Ozs7O0NBT0Q7Ozs7Ozs7Ozs7OzswQkFVQyIsImZpbGUiOiJuZ3gtdHdlZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCwgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbiwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuY2xhc3MgTmd4VHdlZXRTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IF9kb2N1bWVudFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKF9kb2N1bWVudCkge1xuICAgICAgICB0aGlzLl9kb2N1bWVudCA9IF9kb2N1bWVudDtcbiAgICAgICAgdGhpcy5UV0lUVEVSX09CSkVDVCA9ICd0d3R0cic7XG4gICAgICAgIHRoaXMuVFdJVFRFUl9TQ1JJUFRfSUQgPSAndHdpdHRlci13anMnO1xuICAgICAgICB0aGlzLlRXSVRURVJfV0lER0VUX1VSTCA9ICdodHRwczovL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanMnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGxvYWRTY3JpcHQoKSB7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0U2NyaXB0TG9hZCgpO1xuICAgICAgICAgICAgdGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXdbdGhpcy5UV0lUVEVSX09CSkVDVF0ucmVhZHkodGhpcy5fb25Ud2l0dGVyU2NyaXB0TG9hZGVkRmFjdG9yeShvYnNlcnZlcikpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBfc3RhcnRTY3JpcHRMb2FkKCkge1xuICAgICAgICBjb25zdCAvKiogQHR5cGUgez99ICovIHR3aXR0ZXJEYXRhID0gdGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXdbdGhpcy5UV0lUVEVSX09CSkVDVF0gfHwge307XG4gICAgICAgIGlmICh0aGlzLl90d2l0dGVyU2NyaXB0QWxyZWFkeUV4aXN0cygpKSB7XG4gICAgICAgICAgICB0aGlzLl9kb2N1bWVudC5kZWZhdWx0Vmlld1t0aGlzLlRXSVRURVJfT0JKRUNUXSA9IHR3aXR0ZXJEYXRhO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FwcGVuZFR3aXR0ZXJTY3JpcHRUb0RPTSgpO1xuICAgICAgICB0d2l0dGVyRGF0YS5fZSA9IFtdO1xuICAgICAgICB0d2l0dGVyRGF0YS5yZWFkeSA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdHdpdHRlckRhdGEuX2UucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2RvY3VtZW50LmRlZmF1bHRWaWV3W3RoaXMuVFdJVFRFUl9PQkpFQ1RdID0gdHdpdHRlckRhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgX3R3aXR0ZXJTY3JpcHRBbHJlYWR5RXhpc3RzKCkge1xuICAgICAgICBjb25zdCAvKiogQHR5cGUgez99ICovIHR3aXR0ZXJTY3JpcHQgPSB0aGlzLl9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLlRXSVRURVJfU0NSSVBUX0lEKTtcbiAgICAgICAgcmV0dXJuICh0d2l0dGVyU2NyaXB0ICE9PSBudWxsIHx8IHR5cGVvZiB0d2l0dGVyU2NyaXB0ICE9PSAnb2JqZWN0Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgX2FwcGVuZFR3aXR0ZXJTY3JpcHRUb0RPTSgpIHtcbiAgICAgICAgY29uc3QgLyoqIEB0eXBlIHs/fSAqLyBmaXJzdEpTU2NyaXB0ID0gdGhpcy5fZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICAgICAgICBjb25zdCAvKiogQHR5cGUgez99ICovIGpzID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIGpzLmlkID0gdGhpcy5UV0lUVEVSX1NDUklQVF9JRDtcbiAgICAgICAganMuc3JjID0gdGhpcy5UV0lUVEVSX1dJREdFVF9VUkw7XG4gICAgICAgIGZpcnN0SlNTY3JpcHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIGZpcnN0SlNTY3JpcHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG9ic2VydmVyXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBfb25Ud2l0dGVyU2NyaXB0TG9hZGVkRmFjdG9yeShvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gKHR3aXR0ZXJEYXRhKSA9PiB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHR3aXR0ZXJEYXRhKTtcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH07XG4gICAgfVxufVxuTmd4VHdlZXRTZXJ2aWNlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5OZ3hUd2VldFNlcnZpY2UuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW0RPQ1VNRU5ULF0gfSxdIH0sXG5dO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5jbGFzcyBOZ3hUd2VldENvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBfZWxlbWVudFJlZlxuICAgICAqIEBwYXJhbSB7P30gX25neFR3ZWV0U2VydmljZVxuICAgICAqIEBwYXJhbSB7P30gX2NoYW5nZURldGVjdG9yUmVmXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoX2VsZW1lbnRSZWYsIF9uZ3hUd2VldFNlcnZpY2UsIF9jaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICB0aGlzLl9lbGVtZW50UmVmID0gX2VsZW1lbnRSZWY7XG4gICAgICAgIHRoaXMuX25neFR3ZWV0U2VydmljZSA9IF9uZ3hUd2VldFNlcnZpY2U7XG4gICAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmID0gX2NoYW5nZURldGVjdG9yUmVmO1xuICAgICAgICB0aGlzLmlzVHdpdHRlclNjcmlwdExvYWRpbmcgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLl9sb2FkVHdpdHRlclNjcmlwdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIF9sb2FkVHdpdHRlclNjcmlwdCgpIHtcbiAgICAgICAgdGhpcy5fbmd4VHdlZXRTZXJ2aWNlXG4gICAgICAgICAgICAubG9hZFNjcmlwdCgpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCh0d2l0dGVyRGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVHdpdHRlclNjcmlwdExvYWRpbmdTdGF0ZSgpO1xuICAgICAgICAgICAgdHdpdHRlckRhdGEud2lkZ2V0cy5jcmVhdGVUd2VldCh0aGlzLnR3ZWV0SWQsIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwge30pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBfdXBkYXRlVHdpdHRlclNjcmlwdExvYWRpbmdTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5pc1R3aXR0ZXJTY3JpcHRMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG59XG5OZ3hUd2VldENvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbmd4LXR3ZWV0JyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50ICpuZ0lmPVwiaXNUd2l0dGVyU2NyaXB0TG9hZGluZ1wiPjwvbmctY29udGVudD4nLFxuICAgICAgICAgICAgICAgIHN0eWxlczogWycudHdpdHRlci10d2VldCB7IHRyYW5zZm9ybTogbm9uZSAhaW1wb3J0YW50OyB9J10sXG4gICAgICAgICAgICAgICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5OZ3hUd2VldENvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgeyB0eXBlOiBOZ3hUd2VldFNlcnZpY2UsIH0sXG4gICAgeyB0eXBlOiBDaGFuZ2VEZXRlY3RvclJlZiwgfSxcbl07XG5OZ3hUd2VldENvbXBvbmVudC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICBcInR3ZWV0SWRcIjogW3sgdHlwZTogSW5wdXQgfSxdLFxufTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuY2xhc3MgTmd4VHdlZXRNb2R1bGUge1xufVxuTmd4VHdlZXRNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IE5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICBOZ3hUd2VldENvbXBvbmVudFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gICAgICAgICAgICAgICAgZXhwb3J0czogW05neFR3ZWV0Q29tcG9uZW50XSxcbiAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtOZ3hUd2VldFNlcnZpY2VdXG4gICAgICAgICAgICB9LF0gfSxcbl07XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5leHBvcnQgeyBOZ3hUd2VldE1vZHVsZSwgTmd4VHdlZXRDb21wb25lbnQgYXMgybVhLCBOZ3hUd2VldFNlcnZpY2UgYXMgybViIH07XG4iXX0=